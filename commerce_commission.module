<?php
/**
 * @file
 * commerce_commission.module
 */

/**
 * Implements hook_menu().
 */
function commerce_commission_menu() {
  $items = array();

  $items['admin/commerce/config/commission'] = array(
    'title' => 'Commission Settings',
    'description' => 'Configure the commerce commission settings.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('commerce_commission_settings_form'),
    'access arguments' => array('configure commerce commission'),
    'file' => 'commerce_commission.admin.inc',
  );

  $items['admin/commerce/config/cardonfile/settings'] = array(
    'title' => 'Settings',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  );

  $items['p/%/%'] = array(
    'page callback' => 'commerce_commission_set_referral_product',
    'page arguments' => array(1, 2),
    'access callback' => TRUE,
  );
  return $items;
}

/**
 * Implements hook_permission().
 */
function commerce_commission_permission() {
  return array(
    'configure commerce commission' =>  array(
      'title' => t('Configure Commerce Commission'),
      'description' => t('Configure the settings provided by commerce commission module.'),
    ),
  );
}

/**
 * Callback function for referral URL.
 */
function commerce_commission_set_referral_product($username, $product_id) {
  // Initialize the commission settings for the session.
  $_SESSION['commerce_referral'] = array();

  $query = db_select('commerce_product', 'cp')
            ->fields('cp', array('product_id'))
            ->condition('product_id', $product_id)
            ->execute();
  $product_result = $query->fetchObject();

  // If the product id in the referred URL is invalid.
  if (!$product_result) {
    drupal_goto('<front>');
  }

  // Find the user uid for the username in the referral URL.
  $query = db_select('users', 'u')
            ->fields('u', array('uid'))
            ->condition('name', $username)
            ->execute();
  $user_result = $query->fetchObject();

  // If the user with this username does not exist, redirect to the login page.
  if (!$user_result) {
    drupal_goto('user');
  }
  // If the user with this username exists.
  else {
    $_SESSION['commerce_referral'] = array(
      'uid' => $user_result->uid,
      'pid' => $product_result->product_id,
    );
    // Find the node id of the product, referrenced by the field_product field.
    // @todo Make this configurable.
    $query = db_select('field_data_field_product', 'fp')
              ->fields('fp', array('entity_id'))
              ->condition('entity_type', 'node')
              ->condition('field_product_product_id', $product_result->product_id)
              ->execute();
    $product_node = $query->fetchObject();
    // If the product is associated with a node with a product referrence field,
    // redirect the user to the product page with the product id in the URL.
    if ($product_node) {
      $node_url = url();
      drupal_goto('node/' . $product_node->entity_id, array('query' => array('id' => $product_result->product_id)));
      return;
    }
  }
  // Redirect to homepage.
  drupal_goto('<front>');
}

/**
 * Implements hook_commerce_payment_order_paid_in_full().
 */
function commerce_commission_commerce_payment_order_paid_in_full($order, $transaction) {
  if (isset($_SESSION['commerce_referral']) && !empty($_SESSION['commerce_referral'])) {
    $uid = $_SESSION['uid'];
    $product_id = $_SESSION['pid'];
    $order_id = $order->order_id;
    $entity = entity_metadata_wrapper('commerce_order', $order);
    $line_items = $entity->commerce_line_items->value();

    foreach ($line_items as $line_item) {
      if (isset($line_item->data) && !empty($line_item->data)) {
        if (isset($line_item->data['context'])) {
          if (isset($line_item->data['context']['products_ids']) && is_array($line_item->data['context']['products_ids']) && !empty($line_item->data['context']['products_ids'])) {
            if ($line_item->data['context']['products_ids'] == $product_id) {
              $product_cost = $line_item->commerce_unit_price[LANGUAGE_NONE][0]['amount'];
              commerce_commission_grant_permission($uid, $product_id, $order_id, $product_cost);
            }
          }
        }
      }
    }
  }
}

/**
 * Provide commission to the stylist.
 */
function commerce_commission_grant_permission($uid, $product_id, $order_id, $product_cost) {
  $commission_percent = variable_get('commerce_commission_percent', 0);
  if ($commission_percent) {
    $commission_amount = ($product_cost * $commission_percent) / 100;
    db_insert('commerce_commission')
    ->fields(array(
      'uid' => $uid,
      'product_id' => $product_id,
      'order_id' => $order_id,
      'commission_amount' => $commission_amount,
      'created' => REQUEST_TIME,
    ))
    ->execute();
  }
}
