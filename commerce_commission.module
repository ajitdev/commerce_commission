<?php
/**
 * @file
 * commerce_commission.module
 */

/**
 * Implements hook_menu().
 */
function commerce_commission_menu() {
  $items = array();

  $items['admin/commerce/config/commission'] = array(
    'title' => 'Commission Settings',
    'description' => 'Configure the commerce commission settings.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('commerce_commission_settings_form'),
    'access arguments' => array('configure commerce commission'),
    'file' => 'commerce_commission.admin.inc',
  );

  $items['admin/commerce/config/cardonfile/settings'] = array(
    'title' => 'Settings',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  );

  $items['p/%/%'] = array(
    'page callback' => 'commerce_commission_set_referral_product',
    'page arguments' => array(1, 2),
    'access arguments' => array('access content'),
  );
  return $items;
}

/**
 * Implements hook_permission().
 */
function commerce_commission_permission() {
  return array(
    'configure commerce commission' => array(
      'title' => t('Configure commerce commission'),
    ),
  );
}

/**
 * Callback function for referral URL.
 */
function commerce_commission_set_referral_product($username, $node_id) {
  // Initialize the commission settings for the current product.
  $_SESSION['commerce_commission'][$node_id] = array();

  // Check if the node is present.
  $node = node_load($node_id);
  if (!$node) {
    drupal_goto('<front>');
  }

  // Find the user uid for the username in the referral URL.
  $query = db_select('users', 'u')
            ->fields('u', array('uid'))
            ->condition('name', $username)
            ->execute();
  $user_result = $query->fetchObject();

  // If the user with this username does not exist, redirect to the login page.
  if (!$user_result) {
    drupal_goto('user');
  }
  // If the user with this username exists.
  else {
    $products = array();
    // @todo make the field machine name configurable.
    // Using `field_product` by default.
    if (isset($node->field_product) && !empty($node->field_product)) {
      foreach ($node->field_product[LANGUAGE_NONE] as $value) {
        $products[] = $value['product_id'];
      }
    }
    if (!empty($products)) {
      $_SESSION['commerce_commission'][$node_id] = array(
        'uid' => $user_result->uid,
        'pid' => $products,
      );
    }

    // @todo increment hit counter in database for analytics.
    drupal_goto('node/' . $node_id);
    return;
  }
  // Redirect to homepage if any condition is not met.
  drupal_goto('<front>');
}

/**
 * Implements hook_commerce_payment_order_paid_in_full().
 */
function commerce_commission_commerce_payment_order_paid_in_full($order, $transaction) {
  // Check if referral data is present in the session.
  if (isset($_SESSION['commerce_commission']) && !empty($_SESSION['commerce_commission'])) {
    foreach ($_SESSION['commerce_commission'] as $nid => $commission) {
      // Getting values of the variables.
      $uid = $_SESSION['commerce_commission'][$nid]['uid'];
      $order_id = $order->order_id;
      $entity = entity_metadata_wrapper('commerce_order', $order);
      $line_items = $entity->commerce_line_items->value();

      foreach ($line_items as $line_item) {
        if (isset($line_item->data) && !empty($line_item->data)) {
          // The line items can either be a 'product' or 'discounted product'.
          $product_types = array('product', 'product_discount');
          if (in_array($line_item->type, $product_types)) {
            $product_cost = $line_item->commerce_unit_price[LANGUAGE_NONE][0]['amount'];
            $product_currency_code = $line_item->commerce_unit_price[LANGUAGE_NONE][0]['currency_code'];
            $product_id = $line_item->commerce_product[LANGUAGE_NONE][0]['product_id'];
            // If the product being purchased is referred by anyone else.
            if (in_array($product_id, $_SESSION['commerce_commission'][$nid]['pid'])) {
              commerce_commission_grant_permission($uid, $product_id, $order_id, $product_cost, $product_currency_code);
            }
          }
        }
      }
    }
  }
  // Reset the commission data in session after purchase.
  $_SESSION['commerce_commission'] = array();
}

/**
 * Provide commission to the stylist.
 */
function commerce_commission_grant_permission($uid, $product_id, $order_id, $product_cost, $product_currency_code) {
  $commission_percent = variable_get('commerce_commission_percent', 0);
  if ($commission_percent) {
    $commission_amount = ($product_cost * $commission_percent) / 100;
    db_insert('commerce_commission')
      ->fields(array(
        'uid' => $uid,
        'product_id' => $product_id,
        'order_id' => $order_id,
        'commission_amount' => floor($commission_amount),
        'currency_code' => $product_currency_code,
        'created' => REQUEST_TIME,
      ))
      ->execute();
  }
}

/**
 * Implements hook_theme().
 */
function commerce_commission_theme($existing, $type, $theme, $path) {
  return array(
    'commerce_referral_field' => array(
      'variables' => array('link' => NULL),
      'template' => 'commerce-referral-field',
      'path' => "$path/theme",
    ),
  );
}

/**
 * Implements hook_preprocess_node().
 */
function commerce_commission_preprocess_node(&$vars) {
  global $user;
  global $base_url;
  // Only authenticated user should be able to share the link.
  if ($user->uid) {
    // Add JS for copying the URL.
    drupal_add_js(drupal_get_path('module', 'commerce_commission') . '/theme/commerce_commission.js');
    // Add CSS for copying the URL.
    drupal_add_css(drupal_get_path('module', 'commerce_commission') . '/theme/commerce_commission.css');
    // Make sure there is at least one product present for this product display.
    if (isset($vars['field_product']) && !empty($vars['field_product']) && (count($vars['field_product']) > 0)) {
      $link = $base_url . '/p/' . $user->name . '/' . $vars['nid'];
      // Add the copy product link to the $vars array.
      // This can be accessible in the node template.
      $vars['commerce_commission_referral'] = theme('commerce_referral_field', array('link' => $link));
    }
  }
}

/**
 * Implements hook_views_api().
 */
function commerce_commission_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'commerce_commission'),
  );
}
